// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model User {
  id         String   @id @default(cuid())
  first_name String
  last_name  String
  password   String
  email      String   @unique
  clients    Client[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  AuthorizationCode AuthorizationCode[]
  AccessToken       AccessToken[]
  RefreshToken      RefreshToken[]
  @@map(name: "users")
}

model Client {
  id                         String      @id @default(cuid())
  user_id                    String?
  client_id                  String      @unique
  client_secret              String?
  client_name                String      @unique
  client_description         String
  type                       ClientType? @default(web)
  token_endpoint_auth_method String?     @default("client_secret_basic")
  contacts                   String[]
  grant_types                String[]
  response_types             String[]
  redirect_uris              String[]
  logo_uri                   String?
  client_uri                 String?
  policy_uri                 String?
  tos_uri                    String?
  created_at                 DateTime    @default(now())
  updated_at                 DateTime    @updatedAt

  User               User?               @relation(fields: [user_id], references: [id])
  AuthorizationCodes AuthorizationCode[]
  Scopes             Scope[]             @relation(onDelete: Cascade, onUpdate: Cascade)
  AccessTokens       AccessToken[]
  RefreshTokens      RefreshToken[]

  @@map(name: "clients")
}

model AuthorizationCode {
  id                    String              @id @default(cuid())
  user_id               String?
  client_id             String
  code                  String              @unique
  code_challenge        String
  code_challenge_method CodeChallengeMethod @default(plain)
  redirect_uri          String
  Client                Client              @relation(fields: [client_id], references: [id])
  expires_in            DateTime
  created_at            DateTime            @default(now())
  updated_at            DateTime            @updatedAt

  User         User?          @relation(fields: [user_id], references: [id])
  Scopes       Scope[]        @relation(onDelete: Cascade, onUpdate: Cascade)
  AccessTokens AccessToken[]
  RefreshToken RefreshToken[]

  @@map(name: "authorization_codes")
}

model AccessToken {
  id                    String   @id @default(cuid())
  user_id               String?
  authorization_code_id String?
  client_id             String
  token                 String   @unique
  Client                Client   @relation(fields: [client_id], references: [id])
  expires_in            DateTime
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  AuthorizationCode AuthorizationCode? @relation(fields: [authorization_code_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User              User?              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Scopes            Scope[]            @relation(onDelete: Cascade, onUpdate: Cascade)

  @@map(name: "access_tokens")
}

model RefreshToken {
  id                    String   @id @default(cuid())
  user_id               String?
  authorization_code_id String?
  client_id             String
  token                 String   @unique
  expires_in            DateTime
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  AuthorizationCode AuthorizationCode? @relation(fields: [authorization_code_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Client            Client             @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User              User?              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Scopes            Scope[]            @relation(onDelete: Cascade, onUpdate: Cascade)

  @@map(name: "refresh_tokens")
}

model Scope {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Clients            Client[]
  AccessTokens       AccessToken[]
  RefreshTokens      RefreshToken[]
  AuthorizationCodes AuthorizationCode[]

  @@map(name: "scopes")
}

enum ClientType {
  web
  browser
  ios
  android
}

enum CodeChallengeMethod {
  plain
  S256
}
